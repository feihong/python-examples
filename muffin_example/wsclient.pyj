from __python__ import bound_methods


@external
class WebSocket:
    pass


class WsClient:
    auto_dispatch = False
    url = None

    def __init__(self):
        url = self.url
        if str.startswith(url, '/'):
            url = 'ws://' + document.location.host + url
        ws = WebSocket(url)
        ws.onopen = self.on_open
        ws.onclose = self.on_close
        ws.onmessage = self._on_message
        self.ws = ws

    def on_open(self, evt):
        pass

    def on_close(self, evt):
        pass

    def _on_message(self, evt):
        obj = JSON.parse(evt.data)
        if self.auto_dispatch:
            method = getattr(self, 'on_' + obj['type'], None)
            if method is None:
                print(obj)
            else:
                method(obj)
        else:
            self.on_object(obj)

    def send(self, obj):
        self.ws.send(JSON.stringify(obj))

    def on_object(self, obj):
        raise NotImplementedError()
